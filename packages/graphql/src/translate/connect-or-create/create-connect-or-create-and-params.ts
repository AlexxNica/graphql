/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { RelationField, Context } from "../../types";
import { CypherStatement } from "../types";
import { Node, Relationship } from "../../classes";
import createAuthAndParams from "../create-auth-and-params";
import { AUTH_FORBIDDEN_ERROR } from "../../constants";
import { asArray, omitFields } from "../../utils/utils";
import { wrapInCall } from "../utils/wrap-in-call";
import { joinStatements } from "../cypher-builder/join-statements";
import * as CypherBuilder from "../cypher-builder/CypherBuilder";
import { convertToCypherParams } from "../cypher-builder/utils";
import { Param } from "../cypher-builder/CypherBuilder";
import { RawParam } from "../cypher-builder/cypher-builder-references";

type CreateOrConnectInput = {
    where?: {
        node: Record<string, any>;
    };
    onCreate?: {
        node?: Record<string, any>;
        edge?: Record<string, any>;
    };
};

export function createConnectOrCreateAndParams({
    input,
    varName,
    parentVar,
    relationField,
    refNode,
    context,
}: {
    input: CreateOrConnectInput[] | CreateOrConnectInput;
    varName: string;
    parentVar: string;
    relationField: RelationField;
    refNode: Node;
    context: Context;
}): CypherStatement {
    const statements = asArray(input).map((inputItem, index): CypherStatement => {
        const subqueryBaseName = `${varName}${index}`;
        return createConnectOrCreatePartialStatement({
            input: inputItem,
            baseName: subqueryBaseName,
            parentVar,
            relationField,
            refNode,
            context,
        });
    });
    const [statement, params] = joinStatements(statements);
    return [wrapInCall(statement, parentVar), params];
}

function createConnectOrCreatePartialStatement({
    input,
    baseName,
    parentVar,
    relationField,
    refNode,
    context,
}: {
    input: CreateOrConnectInput;
    baseName: string;
    parentVar: string;
    relationField: RelationField;
    refNode: Node;
    context: Context;
}): CypherStatement {
    const mergeRelatedNodeStatement = mergeStatement({
        input,
        baseName,
        refNode,
        context,
        relationField,
        parentNode: new CypherBuilder.NamedNode(parentVar),
    });

    const authStatement = createAuthStatement({
        node: refNode,
        context,
        nodeName: baseName,
    });

    return joinStatements([authStatement, mergeRelatedNodeStatement]);
}

function getOnCreateParameters(onCreateParams: Record<string, any> = {}, node?: Node): Record<string, Param<any>> {
    const params = Object.entries(onCreateParams).reduce((acc, [key, value]) => {
        const nodeField = node?.primitiveFields.find((f) => f.fieldName === key);
        const nodeFieldName = nodeField?.dbPropertyName || nodeField?.fieldName;
        const fieldName = nodeFieldName || key;
        const valueOrArray = nodeField?.typeMeta.array ? [value] : value; // TODO: here is the key
        acc[fieldName] = valueOrArray;
        return acc;
    }, {});
    return convertToCypherParams(params);
}

function mergeStatement({
    input,
    baseName,
    refNode,
    context,
    relationField,
    parentNode,
}: {
    input: CreateOrConnectInput;
    baseName: string;
    refNode: Node;
    context: Context;
    relationField: RelationField;
    parentNode: CypherBuilder.Node;
}): CypherStatement {
    const whereNodeParameters = convertToCypherParams(input.where?.node || {});
    const onCreateNodeParameters = getOnCreateParameters(input.onCreate?.node, refNode);
    const autogeneratedParams = getAutogeneratedParams(refNode);
    const node = new CypherBuilder.Node({
        labels: refNode.getLabels(context),
        parameters: whereNodeParameters,
    });

    const unsetAutogeneratedParams = omitFields(autogeneratedParams, Object.keys(whereNodeParameters));
    const merge = new CypherBuilder.Query()
        .merge(node)
        .onCreate({ ...unsetAutogeneratedParams, ...onCreateNodeParameters }) as CypherBuilder.Query;

    const relationshipFields = context.relationships.find((x) => x.properties === relationField.properties);
    const autogeneratedRelationshipParams = relationshipFields ? getAutogeneratedParams(relationshipFields) : {};
    const onCreateRelationshipParams = convertToCypherParams(input.onCreate?.edge || {});

    const relationship = new CypherBuilder.Relationship({ source: parentNode, target: node, type: relationField.type });

    const relationshipMerge = new CypherBuilder.Query()
        .merge(relationship)
        .onCreate({ relationship: { ...autogeneratedRelationshipParams, ...onCreateRelationshipParams } });
    merge.concat(relationshipMerge);
    const result = merge.build(baseName + "_");

    return [result.cypher, result.params];
}

function createAuthStatement({
    node,
    context,
    nodeName,
    i,
}: {
    node: Node;
    context: Context;
    nodeName: string;
    i?: number;
}): CypherStatement | undefined {
    if (!node.auth) return undefined;

    const indexStr = i === undefined ? "" : String(i);
    const auth = createAuthAndParams({
        entity: node,
        operations: ["CONNECT", "CREATE"],
        context,
        allow: { parentNode: node, varName: nodeName, chainStr: `${nodeName}${node.name}${indexStr}_allow` },
    });

    if (!auth[0]) return undefined;

    return joinStatements(["CALL apoc.util.validate(NOT(", auth, `), "${AUTH_FORBIDDEN_ERROR}", [0])`], "");
}

function getAutogeneratedParams(node: Node | Relationship): Record<string, Param<any>> {
    const autogeneratedFields = node.primitiveFields
        .filter((f) => f.autogenerate)
        .reduce((acc, field) => {
            if (field.dbPropertyName) {
                acc[field.dbPropertyName] = new RawParam("randomUUID()");
            }
            return acc;
        }, {});

    const autogeneratedTemporalFields = node.temporalFields
        .filter((field) => ["DateTime", "Time"].includes(field.typeMeta.name) && field.timestamps?.includes("CREATE"))
        .reduce((acc, field) => {
            if (field.dbPropertyName) {
                acc[field.dbPropertyName] = new RawParam(`${field.typeMeta.name.toLowerCase()}()`);
            }
            return acc;
        }, {});
    return { ...autogeneratedTemporalFields, ...autogeneratedFields };
}
